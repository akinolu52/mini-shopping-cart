[{"/Users/mac/Desktop/web/shopping-cart/src/reportWebVitals.js":"1","/Users/mac/Desktop/web/shopping-cart/src/App.js":"2","/Users/mac/Desktop/web/shopping-cart/src/index.js":"3","/Users/mac/Desktop/web/shopping-cart/src/components/Header.js":"4","/Users/mac/Desktop/web/shopping-cart/src/components/Tagline.js":"5","/Users/mac/Desktop/web/shopping-cart/src/components/Product.js":"6","/Users/mac/Desktop/web/shopping-cart/src/components/Products.js":"7","/Users/mac/Desktop/web/shopping-cart/src/components/Sidebar.js":"8","/Users/mac/Desktop/web/shopping-cart/src/cart-context.js":"9"},{"size":362,"mtime":1606297857036,"results":"10","hashOfConfig":"11"},{"size":928,"mtime":1606585715325,"results":"12","hashOfConfig":"11"},{"size":773,"mtime":1606585954589,"results":"13","hashOfConfig":"11"},{"size":635,"mtime":1606585626750,"results":"14","hashOfConfig":"11"},{"size":1227,"mtime":1606585467046,"results":"15","hashOfConfig":"11"},{"size":982,"mtime":1606581902075,"results":"16","hashOfConfig":"11"},{"size":1387,"mtime":1606585884180,"results":"17","hashOfConfig":"11"},{"size":5112,"mtime":1606585520520,"results":"18","hashOfConfig":"11"},{"size":6531,"mtime":1606585112162,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"61l1aa",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/mac/Desktop/web/shopping-cart/src/reportWebVitals.js",[],"/Users/mac/Desktop/web/shopping-cart/src/App.js",[],"/Users/mac/Desktop/web/shopping-cart/src/index.js",[],"/Users/mac/Desktop/web/shopping-cart/src/components/Header.js",[],"/Users/mac/Desktop/web/shopping-cart/src/components/Tagline.js",[],"/Users/mac/Desktop/web/shopping-cart/src/components/Product.js",[],"/Users/mac/Desktop/web/shopping-cart/src/components/Products.js",[],"/Users/mac/Desktop/web/shopping-cart/src/components/Sidebar.js",[],"/Users/mac/Desktop/web/shopping-cart/src/cart-context.js",["39"],"import * as React from 'react';\n\nconst CartStateContext = React.createContext();\nconst CartDispatchContext = React.createContext();\n\nfunction find(products, id) {\n    const foundIndex = products.findIndex(p => +p.id === +id);\n    const product = products[foundIndex];\n\n    return { product, foundIndex };\n}\n\nfunction remove(products, foundIndex) {\n    products.splice(foundIndex, 1);\n    return products;\n}\n\nfunction cartReducer(state, action) {\n    switch (action.type) {\n        case 'save-products': {\n            const allProducts = action.payload;\n            const { selectedCurrency, products } = state;\n            if (products) {\n                // const _products = [...products]\n                 products.map(product => {\n                    product.amount = allProducts[product.id].price * product.count\n                });\nconst _p = [...products]\n                // update the values\n                console.log('products -> ', products, _p);\n                return { products: _p, selectedCurrency, allProducts };\n\n\n            } else {\n            return { products, selectedCurrency, allProducts };\n                \n            }\n        }\n        case 'increment': {\n            /*\n            * check for the index of the product\n           `* increase product count by 1\n           `*/\n            const { products, selectedCurrency, allProducts } = state;\n            console.log('selectedCurrency -> ',selectedCurrency);\n            const id = action.payload;\n            const { product, foundIndex } = find(products, id);\n\n            const count = product.count + 1;\n            const amount = count * product.price;\n            const _product = {\n                ...product,\n                amount,\n                count,\n            };\n            const _products = [...products]\n            _products[foundIndex] = _product;\n            return { products: _products, selectedCurrency, allProducts };\n        }\n        case 'decrement': {\n            /*\n            * check for the index of the product\n           `* check if the product count is 1, if it's one - remove the product\n           `* if product count is more than one, decrease it by 1\n            */\n\n            const { products, selectedCurrency, allProducts } = state;\n            const id = action.payload;\n            const { product, foundIndex } = find(products, id);\n\n            const localProduct = {\n                ...products[foundIndex]\n            }\n\n            if (localProduct.count === 1) {\n                // remove from cart\n                const _products = [...products];\n                const _p = remove(_products, foundIndex);\n\n                return { products: _p, selectedCurrency, allProducts }\n            } else {\n                const count = product.count - 1;\n                const amount = count * product.price;\n\n                const newProduct = {\n                    ...product,\n                    amount,\n                    count\n                };\n                const _products = [...products]\n                _products[foundIndex] = newProduct;\n\n                return { products: _products, selectedCurrency, allProducts };\n            }\n        }\n        case 'add': {\n            /*\n            * check if the product exist in the cart\n           `* if it exist - increment\n           `* if it does not exist & there's no product - create only it\n            * if it does not exist & there's at least a product - increment it\n            */\n            const { products, selectedCurrency, allProducts } = state;\n            let product = action.payload;\n            const { foundIndex } = find(products, product.id);\n            let updatedProducts;\n\n            if (foundIndex !== -1) {\n                const _product = products[foundIndex];\n                const count = _product?.count + 1;\n                const amount = count * _product.price;\n\n                const newProduct = {\n                    ..._product,\n                    count,\n                    amount\n                };\n                const _products = [...products]\n                _products[foundIndex] = newProduct;\n\n                return { products: _products, selectedCurrency, allProducts };\n            } else {\n                product = {\n                    ...product,\n                    count: 1,\n                    amount: product.price\n                }\n                if (products?.length) {\n                    updatedProducts = [...products, product];\n                } else {\n                    updatedProducts = [product];\n                }\n                return { products: updatedProducts, selectedCurrency, allProducts };\n\n            }\n        }\n        case 'remove': {\n            /*\n            * check if the index of the product exist\n           `* remove the index from the array\n            */\n            let { products, selectedCurrency, allProducts } = state;\n            const id = action.payload;\n            const { foundIndex } = find(products, id);\n\n            if (foundIndex !== -1) {\n                products = remove(products, foundIndex);\n            }\n\n            return { products, selectedCurrency, allProducts };\n        }\n        case 'change-currency': {\n            console.log('payload', action.payload);\n            const selectedCurrency = action.payload;\n\n            const { products, allProducts } = state;\n\n            return { products, selectedCurrency, allProducts };\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action.type}`)\n        }\n    }\n}\n\nfunction CartProvider({ children }) {\n    const [state, dispatch] = React.useReducer(cartReducer, {\n        products: [],\n        allProducts: [],\n        selectedCurrency: 'USD'\n    });\n    return (\n        <CartStateContext.Provider value={state}>\n            <CartDispatchContext.Provider value={dispatch}>\n                {children}\n            </CartDispatchContext.Provider>\n        </CartStateContext.Provider>\n    )\n}\n\nfunction useCartState() {\n    const context = React.useContext(CartStateContext);\n    if (context === undefined) {\n        throw new Error('useCartState must be used within a CartProvider')\n    }\n    return context\n}\n\nfunction useCartDispatch() {\n    const context = React.useContext(CartDispatchContext);\n    if (context === undefined) {\n        throw new Error('useCartDispatch must be used within a CartProvider')\n    }\n    return context\n}\n\nexport { CartStateContext, CartDispatchContext, CartProvider, useCartState, useCartDispatch }",{"ruleId":"40","severity":1,"message":"41","line":25,"column":39,"nodeType":"42","messageId":"43","endLine":25,"endColumn":41},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]